{"version":3,"sources":["css.js"],"names":["define","head","document","getElementsByTagName","isWebkit","window","navigator","userAgent","match","webkitLoadCheck","link","callback","setTimeout","i","styleSheets","length","href","findExistingCSS","url","arrayLike","func","arr","forEach","item","push","filter","noop","fetch","load","links","address","reloadable","hasAttribute","setAttribute","cssIsReloadable","existingLinks","Promise","resolve","reject","timeout","waitSeconds","_callback","error","clearTimeout","onload","onerror","createElement","type","rel","event","Error","insertBefore","appendChild","then","result","parentElement","removeChild","err"],"mappings":"AACAA,OAAO,KACL,MAEMC,EAAOC,SAASC,qBAAqB,QAAQ,GAE7CC,IAAaC,OAAOC,UAAUC,UAAUC,MAAM,yBAC9CC,EAAkB,SAAUC,EAAMC,GACtCC,WAAW,KACT,IAAK,IAAIC,EAAI,EAAGA,EAAIX,SAASY,YAAYC,OAAQF,IAAK,CAEpD,GADcX,SAASY,YAAYD,GACzBG,OAASN,EAAKM,KAAoB,YAAZL,IAElCF,EAAgBC,EAAMC,IACrB,KAgBCM,EAAkB,SAAyBC,GAG/C,OAqDF,SAAgBC,EAAWC,GACzB,MAAMC,KAIN,OAHAC,EAAQH,EAAYI,IACdH,EAAKG,IAASF,EAAIG,KAAKD,KAEtBF,EA1DAI,CADOxB,EAAKE,qBAAqB,QACnBO,GAAQA,EAAKM,OAASE,IAGvCQ,EAAO,aA2Db,SAASJ,EAAQH,EAAWC,GAC1B,IAAK,IAAIP,EAAI,EAAGA,EAAIM,EAAUJ,OAAQF,IACpCO,EAAKD,EAAUN,IAInB,OAASc,MAxBK,SAAUC,GAEtB,MAAMC,EAAQZ,EAAgBW,EAAKE,SACnC,OA/DsB,SAAyBD,GAG/C,IAAIE,GAAa,EAOjB,OANAT,EAAQO,EAAQnB,IACTA,EAAKsB,aAAa,uBACrBD,GAAa,EACbrB,EAAKuB,aAAa,oBAAqB,OAGpCF,EAqDFG,CAAgBL,IA1CGX,EA2CTU,EAAKE,QA3CSK,EA2CAN,EA1CtB,IAAIO,QAAQ,CAAEC,EAASC,KAC5B,MAAMC,EAAU3B,WAAW,KACzB0B,EAAO,uBACNE,KACGC,EAAY,SAAUC,GAC1BC,aAAaJ,GACb7B,EAAKkC,OAASlC,EAAKmC,QAAUnB,EAC7Bd,WAAW,KACL8B,EAASJ,EAAOI,GAAiBL,EAAQ,KAC5C,IAEL,IAAI3B,EAAOR,SAAS4C,cAAc,QAClCpC,EAAKqC,KAAO,WACZrC,EAAKsC,IAAM,aACXtC,EAAKM,KAAOE,EACZR,EAAKuB,aAAa,oBAAqB,IAClC7B,EAKHK,EAAgBC,EAAM+B,GAJtB/B,EAAKkC,OAAS,WACZH,KAKJ/B,EAAKmC,QAAU,SAAUI,GACvBR,EAAUQ,EAAMP,OAAS,IAAIQ,MAAM,6BAEjCf,EAAcpB,OAAUd,EAAKkD,aAAazC,EAAMyB,EAAc,IAAclC,EAAKmD,YAAY1C,KAGhG2C,KAAMC,IACLhC,EAAQa,EAAgBzB,IAAWA,EAAK6C,cAAcC,YAAY9C,KAC3D4C,GACLG,IAEF,MADAnC,EAAQa,EAAgBzB,IAAWA,EAAK6C,cAAcC,YAAY9C,KAC5D+C,KAO4B,GA1CxB,IAAUvC,EAAKiB","file":"css.js","sourcesContent":["/* eslint-disable */\ndefine(() => {\n  const waitSeconds = 100;\n\n  const head = document.getElementsByTagName('head')[0];\n\n  const isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n  const webkitLoadCheck = function (link, callback) {\n    setTimeout(() => {\n      for (let i = 0; i < document.styleSheets.length; i++) {\n        const sheet = document.styleSheets[i];\n        if (sheet.href === link.href) { callback(); return; }\n      }\n      webkitLoadCheck(link, callback);\n    }, 10);\n  };\n\n  const cssIsReloadable = function cssIsReloadable(links) {\n    // Css loaded on the page initially should be skipped by the first\n    // systemjs load, and marked for reload\n    let reloadable = true;\n    forEach(links, (link) => {\n      if (!link.hasAttribute('data-systemjs-css')) {\n        reloadable = false;\n        link.setAttribute('data-systemjs-css', '');\n      }\n    });\n    return reloadable;\n  };\n\n  const findExistingCSS = function findExistingCSS(url) {\n    // Search for existing link to reload\n    const links = head.getElementsByTagName('link');\n    return filter(links, link => link.href === url);\n  };\n\n  const noop = function () {};\n\n  const loadCSS = function (url, existingLinks) {\n    return new Promise(((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject('Unable to load CSS');\n      }, waitSeconds * 1000);\n      const _callback = function (error) {\n        clearTimeout(timeout);\n        link.onload = link.onerror = noop;\n        setTimeout(() => {\n          if (error) { reject(error); } else { resolve(''); }\n        }, 7);\n      };\n      var link = document.createElement('link');\n      link.type = 'text/css';\n      link.rel = 'stylesheet';\n      link.href = url;\n      link.setAttribute('data-systemjs-css', '');\n      if (!isWebkit) {\n        link.onload = function () {\n          _callback();\n        };\n      } else {\n        webkitLoadCheck(link, _callback);\n      }\n      link.onerror = function (event) {\n        _callback(event.error || new Error('Error loading CSS file.'));\n      };\n      if (existingLinks.length) { head.insertBefore(link, existingLinks[0]); } else { head.appendChild(link); }\n    }))\n    // Remove the old link regardless of loading outcome\n      .then((result) => {\n        forEach(existingLinks, (link) => { link.parentElement.removeChild(link); });\n        return result;\n      }, (err) => {\n        forEach(existingLinks, (link) => { link.parentElement.removeChild(link); });\n        throw err;\n      });\n  };\n\n  const fetch = function (load) {\n    // dont reload styles loaded in the head\n    const links = findExistingCSS(load.address);\n    if (!cssIsReloadable(links)) { return ''; }\n    return loadCSS(load.address, links);\n  };\n\n\n  // Because IE8?\n  function filter(arrayLike, func) {\n    const arr = [];\n    forEach(arrayLike, (item) => {\n      if (func(item)) { arr.push(item); }\n    });\n    return arr;\n  }\n\n  // Because IE8?\n  function forEach(arrayLike, func) {\n    for (let i = 0; i < arrayLike.length; i++) {\n      func(arrayLike[i]);\n    }\n  }\n\n  return { fetch };\n});\n"]}